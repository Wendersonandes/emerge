README
======

The goal of this skeleton project is to provide rock solid security and performance
without significant configuration or rewriting code. It is currently used in
several production apps.

## Features

* [BEM CSS](http://bem.info/method/) â€“ makes it easier to search and replace and maintain larger CSS projects


## Setup

Install StarkerKit:

```bash
git clone https://github.com/10hacks/rails4-starterkit.git
cd rails4-starterkit
bundle install

# For OSX
gem install rb-fsevent

# For Linux
gem install rb-inotify

# Make sure postgresql and redis are running locally, then
rake db:setup


```

Update local development security tokens:

1. Replace security tokens in `config/application.yml`
  1. For each of DEVISE_SECRET_KEY, DEVISE_PEPPER, and SECRET_KEY_BASE generate a new key:
    1. `rake secret`

Production server security tokens should be set as ENV vars.

Rename your app:

1. Search and replace `StarterKit` with your app name

Add additional account fields as needed:

1. Edit RegistrationController and migrations to customize User fields


Spring is enabled by default. To use Zeus, comment out spring gems in Gemfile and
uncomment zeus.

```bash
# Spring
rails server
bundle exec guard
bin/rspec spec/

# Zeus
zeus start
zeus server
bundle exec guard
zeus test spec/
```

## Configuring

All app specific configuration is located in `config/application.yml`.

Keys in the `defaults.env` section are automatically overridden by any ENV vars
with the same name. Set defaults in the `application.yml` file to development
values and then set ENV vars on production and staging servers.


## Github

If you're using Github you probably want to add an upstream remote to
keep in sync with StarterKit changes.

```bash
git remote add upstream https://github.com/10hacks/rails4-starterkit.git

# Fetch latest upstream changes
git fetch upstream
```

## Heroku

```bash
heroku create [app name]

# Copy and paste
heroku addons:add heroku-postgresql
heroku addons:add memcachier
heroku addons:add newrelic
heroku addons:add pgbackups
heroku addons:add redistogo
heroku addons:add sendgrid
heroku config:add DEVISE_SECRET_KEY="$(bundle exec rake secret)"
heroku config:add DEVISE_PEPPER="$(bundle exec rake secret)"
heroku config:add SECRET_KEY_BASE="$(bundle exec rake secret)"

# Needs customization
heroku config:add MAIL_HOST=[YOUR APP URL]

git push heroku master

heroku run rake db:migrate
heroku open

# Be sure to configure social login keys to get Facebook/Twitter/etc. login to work.
```


## Install Errbit

StarterKit is setup to use Airbrake or Errbit for error tracking and reporting.

See [https://github.com/errbit/errbit](https://github.com/errbit/errbit) for installation.

A common approach for production is to run StarterKit and Errbit as separate Heroku apps.

After setting up Airbrake or Errbit, update your server ENV vars.

```bash
# In rails4-starterkit dir

heroku config:add AIRBRAKE_API_KEY=[YOUR KEY]
heroku config:add AIRBRAKE_HOST=[YOUR-ERRBIT-APP.herokuapp.com]

# Send test
rake airbrake:test
```


## Update Gems

StarterKit Gemfile does not specify gem versions in order to make upgrading easier.

```bash
bundle update
```


## Demo

Twitter demo app credentials uses a callback url of http://0.0.0.0:3000/auth/twitter/callback


TODO
====

* add support for username
* Setup Rack::Cache https://devcenter.heroku.com/articles/rack-cache-memcached-rails31
* Install Devise Security Extension https://github.com/phatworx/devise_security_extension
* Review config/initializers/devise.rb
* Convert to lazy registration https://github.com/mwlang/lazy_registration_demos
* Use decorators https://github.com/drapergem/draper
* Make sure rspecs follow best practices: http://betterspecs.org/
* Run should_clean -d spec/


Compatibility
=============

* IE 8+ unless additional shims are added
  * See app/assets/stylesheets/icons_social.scss


Configure
=========

Replace values in config/env.rb with development values or delete the file if not needed.

Debugging
=========

Use `byebug` instead of `debugger`.


Sidekiq
=======

For demo on Heroku, StarterKit spawns a sidekiq worker in the web dyno.

To use traditional workers in their own dyno, modify Procfile and config/unicorn.rb


Auth Flows
==========

* origin = page user was on when auth flow started
* after auth = page where user can be prompted to enter any
  additional required account info like email address

### Sign Up

Start at /a/signup

**OAuth:**

1. RegistrationsController#after_auth
2. If user.valid?, redirect to origin or user_root_path
3. If user.invalid?, show interrupt page so user can add additional info
  1. Post to RegistrationsController#create

If user already had an account via the OAuth provider, he/she is simply logged in.

**Username/Password:**

1. Post to RegistrationsController#create
2. Redirect to origin or user_root_path


### Login

**OAuth:**

If user does not already have an account via the OAuth provider, redirect to signup page.

Otherwise, login user and redirect to either...

1. RegistrationsController#after_auth if additional account info is needed
2. Origin page if specified
3. user_root_path

**Username/Password:**

Same as OAuth flow above.


Mail Previews
=============

Rails 4.1 introduced mailer previews. StarterKit now has two ways to preview emails:

* http://localhost:3000/rails/mailers
* http://localhost:3000/p/email




Philosophy
==========

BDD is fun. Best practices increase productivity. Setting up frameworks is a waste of time.
