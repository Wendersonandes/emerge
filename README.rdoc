README
======

The goal of this skeleton project is to provide rock solid security and performance
without significant configuration or rewriting code. It is currently used in
several production apps.



## Setup

Install StarkerKit:

```bash
git clone https://github.com/10hacks/rails4-starterkit.git
cd rails4-starterkit
bundle install

# For OSX
gem install rb-fsevent

# For Linux
gem install rb-inotify
```

Update local development security tokens:

1. Replace security tokens in `config/application.yml`
  1. For each of DEVISE_SECRET_KEY, DEVISE_PEPPER, and SECRET_KEY_BASE generate a new key:
    1. `rake secret`

Production server security tokens should be set as ENV vars.

Rename your app:

1. Search and replace `StarterKit` with your app name

Add additional account fields as needed:

1. Edit RegistrationController and migrations to customize User fields


```bash
zeus start
bundle exec guard
```

## Github

If you're using Github you probably want to add an upstream remote to 
keep in sync with StarterKit changes.

```bash
git remote add upstream https://github.com/10hacks/rails4-starterkit.git

# Fetch latest upstream changes
git fetch upstream
```

## Heroku

```bash
heroku create [app name]
git push heroku master
```


## Install Errbit

StarterKit is setup to use Airbrake or Errbit for error tracking and reporting.

See [https://github.com/errbit/errbit](https://github.com/errbit/errbit) for installation.

A common approach for production is to run StarterKit and Errbit as separate Heroku apps.


## Update Gems

StarterKit Gemfile does not specify gem versions in order to make upgrading easier.

```bash
bundle update
```


## Demo

Twitter demo app credentials uses a callback url of http://0.0.0.0:3000/auth/twitter/callback


TODO
====

* add support for username
* Setup Rack::Cache https://devcenter.heroku.com/articles/rack-cache-memcached-rails31
* Install Devise Security Extension https://github.com/phatworx/devise_security_extension
* Review config/initializers/devise.rb
* Convert to lazy registration https://github.com/mwlang/lazy_registration_demos
* Use decorators https://github.com/drapergem/draper
* Make sure rspecs follow best practices: http://betterspecs.org/
* Run should_clean -d spec/


Compatibility
=============

* IE 8+ unless additional shims are added
  * See app/assets/stylesheets/icons_social.scss


Configure
=========

Replace values in config/env.rb with development values or delete the file if not needed.

Debugging
=========

Use `byebug` instead of `debugger`.


Sidekiq
=======

For demo on Heroku, StarterKit spawns a sidekiq worker in the web dyno.

To use traditional workers in their own dyno, modify Procfile and config/unicorn.rb


Auth Flows
==========

* origin = page user was on when auth flow started
* after auth = page where user can be prompted to enter any
  additional required account info like email address

### Sign Up

Start at /a/signup

**OAuth:**

1. RegistrationsController#after_auth
2. If user.valid?, redirect to origin or user_root_path
3. If user.invalid?, show interrupt page so user can add additional info
  1. Post to RegistrationsController#create

If user already had an account via the OAuth provider, he/she is simply logged in.

**Username/Password:**

1. Post to RegistrationsController#create
2. Redirect to origin or user_root_path


### Login

**OAuth:**

If user does not already have an account via the OAuth provider, redirect to signup page.

Otherwise, login user and redirect to either...

1. RegistrationsController#after_auth if additional account info is needed
2. Origin page if specified
3. user_root_path

**Username/Password:**

Same as OAuth flow above.



Philosophy
==========

BDD is fun. Best practices increase productivity. Setting up frameworks is a waste of time.
